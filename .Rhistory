mynames[myfull]
p[["formula"]]
p[["x.limits"]]
table(f)
xyplot(y~x|f, layout = c(2,1))
v1
v2
myedit("plot1.R")
source(pathtofile("plot1.R"), local = TRUE)
myedit("plot2.R")
source(pathtofile("plot2.R"), local = TRUE)
str(diamonds)
table(diamonds$color)
table(diamonds$color, diamonds$cut)
myedit("myLabels.R")
pathtofile("myLabels.R")
pathtofile("myLabels.R", local = TRUE)
source(pathtofile("myLabels.R"), local = TRUE)
xyplot(price ~ carat | color*cut, data = diamonds, strip = FALSE, pch = 20, xlab = myxlab, ylab = myylab, main = mymain)
xyplot(price ~ carat | color*cut, data = diamonds, pch = 20, xlab = myxlab, ylab = myylab, main = mymain)
sample(colors(), 10)
pal <- colorRamp(c("red", "blue"))
pal(0)
pal(1)
pal(seq(0,1,len=6))
p1 <- colorRampPalette(c("red", "blue"))
p1(2)
p1(6)
0xCC
colorRampPalette(c("red", "yellow"))
p2 <- colorRampPalette(c("red", "yellow"))
p2(2)
p2(10)
showMe(p1(20))
showMe(p2(20))
showMe(p2(2))
p1
?fun
?rgb
p3 <- colorRampPalette(c("blue", "green"))
p3 <- colorRampPalette(c("blue", "green"), alpha =.5)
p3
p3(5)
plot(x, y, pch = 19, col = rgb(0, .5,.5))
plot(x, y, pch = 19, col = rgb(0, .5,.5))
plot(x, y, pch = 19, col = rgb(0, .5,.5, .3))
cols <- brewer.pal(3, "BuGn")
showMe(cols)
pal <- colorRampPalette(cols)
showMe(pal(20))
image)volcano, col = pal(20))
image(volcano, col = pal(20))
image(volcano, col = (20))
image(volcano, col = p1(20))
str(mpg)
qplot(displ, hwy, mpg)
qplot(displ, hwy, data =mpg)
qplot(displ, hwy, data =mpg, aes = drv)
qplot(displ, hwy, data =mpg, aes = mpg$drv)
qplot(displ, hwy, data =mpg, aes(drv))
qplot(displ, hwy, data =mpg, aes("drv"))
qplot(displ, hwy, data =mpg, aesthetic("drv"))
qplot(displ, hwy, data =mpg, aesthetic(drv))
qplot(displ, hwy, data =mpg, aesthetic =drv)
qplot(displ, hwy, data =mpg, aesthetic(color =drv))
qplot(displ, hwy, data =mpg, aes(color = drv))
qplot(displ, hwy, data =mpg, aes(color = "drv"))
qplot(displ, hwy, data = mpg, aesthetic(color = drv))
qplot(displ, hwy, data = mpg, color = drv)
qplot(displ, hwy, data = mpg, color = drv, geom = c("points", "smooth"))
qplot(displ, hwy, data = mpg, color = drv, geom = c("point", "smooth"))
qplot(y = hwy, data = mpg, color = drv)
hwy
myhigh
qplot(drv, hwy, data = mpg, geom = "boxplot")
qplot(drv, hwy, data = mpg, geom = "boxplot", color = manufacturer)
qplot(hwy, data = mpg, fill = drv)
qplot(displ, hwy, data = mpg, facets = .~ drv)
qplot(hwy, data = mpg, facets = drv ~., bindwith = 2)
qplot(hwy, data = mpg, facets = drv ~., binwidth = 2)
q()
library(swirl)
swirl()
qplot(displ, hwy, data = mpg, geom = c("point", "smooth"), facets = .~drv)
g <- ggplot(mpg, aes(displ, hsy) )
g <- ggplot(mpg, aes(displ, hwy))
summary(g)
print(g)
g + geom_point()
g + geom_point() + geom_smooth()
g + geom_point() + geom_smooth("lm")
g + geom_point() + geom_smooth(method ="lm")
g + geom_point() + geom_smooth(method ="lm") + facet_grid(.~drv)
add ggtitle("Swirl Rules!")
g + geom_point() + geom_smooth(method ="lm") + facet_grid(.~drv)+ ggtitle("Swirl Rules!")
g + geom_point(color = "pink", size = 4, alpha = 1/2) + geom_smooth(method ="lm") + facet_grid(.~drv)+ ggtitle("Swirl Rules!")
g+geom_point(color="pink",size=4,alpha=1/2)
g+geom_point(size=4,alpha=1/2, aes(color =drv))
g + geom_point(color = drv)+ labs(title = "Swirl Rules!")+ labs(x = "Displacement", y = "Hwy Mileage")
g + geom_point(aes(color = drv)+ labs(title = "Swirl Rules!")+ labs(x = "Displacement", y = "Hwy Mileage")
g + geom_point(aes(color = drv)+ labs(title = "Swirl Rules!")+ labs(x = "Displacement", y = "Hwy Mileage")
g + geom_point(aes(color = drv))+ labs(title = "Swirl Rules!")+ labs(x = "Displacement", y = "Hwy Mileage")
g + geom_point(aes(color = drv), size = 2, alpha = 1/2)+ geom_smooth(size = 4, linetype = 3, method = "lm", se = FALSE)
g + geom_point(aes(color = drv)) + theme_bw(base_family = "Times")
plot(myx, myy, type ="l", ylim=c(-3,3))
ggplot(testdat, aes(x = myx, y = myy))
g <- ggplot(testdat, aes(x = myx, y = myy))
g + geom_line()
g + geom_line()+ylim(-3,3)
g + geom_line()+coord_cartesian(ylim = c(-3,3))
g + ggplot(dataset, aes(x=displ, y = hwy, color = factor(year)))
g + ggplot(mpg, aes(x=displ, y = hwy, color = factor(year)))
g + ggplot(testdat, aes(x=displ, y = hwy, color = factor(year)))
g + ggplot(testdat, aes(x=displ, y = hwy, color = factor(year)))
View(dmean)
View(restData)
View(testdat)
g + ggplot(mpg, aes(x=displ, y = hwy, color = factor(year)))
library(datasets)
g + ggplot(mpg, aes(x=displ, y = hwy, color = factor(year)))
g + ggplot(mpg,aes(x=displ, y = hwy, color = factor(year)))
g + ggplot(mpg,aes(x=displ, y=hwy, color=factor(year)))
g <- ggplot(mpg,aes(x=displ,y=hwy,color=factor(year)))
g + geom_point()
g + geom_point()+ facet_grid(drv~cyl, margins = TRUE)
g + geom_point()+ facet_grid(drv~cyl, margins = TRUE) + geom_smooth(method = "lm", se = FALSE, size = 2, color = "black")
g + geom_point()+ facet_grid(drv~cyl, margins = TRUE) + geom_smooth(method = "lm", se = FALSE, size = 2, color = "black") + labs(x = "Displacement", y = "Hihgway Mileage", title = "Swirl Rules!")
g + geom_point()+ facet_grid(drv~cyl, margins = TRUE) + geom_smooth(method = "lm", se = FALSE, size = 2, color = "black") + labs(x = "Displacement", y = "Highway Mileage", title = "Swirl Rules!")
str(diamonds)
qplot(price, data = diamonds)
range(diamonds$price)
qplot(price, data = diamonds, binwidth = 18497/30)
brk
counts
qplot(price, data = diamonds, binwidth = 18497/30, fill = cut)
qplot(price, data = diamonds, geom = "density")
qplot(price, data = diamonds, geom = "density", color=cut)
qplot(carat, price, data = diamonds)
qplot(carat, price, data = diamonds, shape = cut)
qplot(carat, price, data = diamonds, shape = cut, color = cut)
qplot(carat,price,data=diamonds, color=cut)
qplot(carat,price,data=diamonds, color=cut, geom_smooth = "lm")
qplot(carat,price,data=diamonds, color=cut, geom_smooth("lm")
)
qplot(carat,price,data=diamonds, color=cut)+ geom_smooth("lm")
qplot(carat,price,data=diamonds, color=cut)+ geom_smooth("lm")
qplot(carat,price,data=diamonds, color=cut)+ geom_smooth("lm")
qplot(carat,price,data=diamonds, color=cut)+ geom_smooth("lm")
qplot(carat,price,data=diamonds, color=cut)+ geom_smooth("lm")
qplot(carat,price,data=diamonds, color=cut, geom_smooth("lm"))
qplot(carat,price,data=diamonds, color=cut, geom_smooth ="lm" )
qplot(carat,price,data=diamonds, color=cut, geom_smooth ="lm" )
}
qplot(carat,price,data=diamonds, color=cut, geom_smooth ="lm" )
}
qplot(carat,price,data=diamonds, color=cut, geom_smooth ="lm" )
qplot(carat,price,data=diamonds, color=cut, geom_smooth ="lm" )
qplot(carat,price,data=diamonds, color=cut, geom_smooth ="lm" )
qplot(carat,price,data=diamonds, color=cut, geom_smooth ="lm" )
qplot(carat,price,data=diamonds, color=cut, geom_smooth ="lm" )
qplot(carat,price,data=diamonds, color=cut, geom_smooth ="lm" )
qplot(carat,price,data=diamonds, color=cut, geom_smooth ="lm" )
qplot(carat,price,data=diamonds, color=cut, geom_smooth ="lm" )
qplot(carat,price,data=diamonds, color=cut, geom_smooth ="lm")
qplot(carat,price,data=diamonds, color=cut")
)
)
qplot(carat,price,data=diamonds, color=cut")
qplot(carat,price,data=diamonds, color=cut)
qplot(carat,price,data=diamonds, color=cut) + geom_smooth(method="lm")
qplot(carat,price,data=diamonds, color=cut, facets = .~cut) + geom_smooth(method="lm")
g <- ggplot(diamonds, aes(depth, price))
summary(g)
g+geom_point(alpha = 1/3)
cutpoints <- quantile(diamonds$carat, seq(0,1, lenght = 4), na.rm = TRUE)
cutpoints <- quantile(diamonds$carat, seq(0,1, length = 4), na.rm = TRUE)
cutpoints
diamonds$car2 <- cut(diamonds$carat, cutpoints)
g <- ggplot(diamonds, aes(depth, price))
g+ geom_point(alpa = 1/3, facet_grid = cut ~ car2)
g+ geom_point(alpa = 1/3, facet_grid(cut ~ car2))
g+ geom_point(alpa = 1/3)+ facet_grid(cut ~ car2)
g+ geom_point(alpha = 1/3)+ facet_grid(cut ~ car2)
diamonds[myd,]
g+ geom_point(alpha = 1/3)+ facet_grid(cut ~ car2)+ geom_smooth(method = "lm", size = 3, color = "pink")
ggplot(diamonds, aes(carat, price))+ geom_boxplot()+ facet_grid(.~cut)
library(nlme)
library(lattice)
xyplot(weight ~ Time | Diet, BodyWeight)
library(datasets)
data(airquality)
airquality = transform(airquality, Month = factor(Month))
qplot(Wind, Ozone, data = airquality, facets = . ~ Month)
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
library(ggplot2)
library(ggplot2movies)
g <- ggplot(movies, aes(votes, rating))
print(g)
library(ggplot2)
library(ggplot2movies)
g <- ggplot(movies, aes(votes, rating))
print(g)
library(swirl)
swirl()
dist(dataFrame)
hc <- hclust(distxy)
plot(hc)
plot(as.dendogram(hc))
plot(as.dendrogram(hc))
abline(h=1.5, col="blue")
abline(h=0.4, col="red")
5
9
12
abline(h=0.05, col="green")
dist(dFsm)
plot(hf)
plot(hc)
hc
heatmap(dataMatrix, col = cm.colors(25))
heatmap(mt)
mt
plot(denmt)
distmt
quit()
library(swirl)
swirl()
q()
library(swirl)
carlosgim
swirl()
cmat
plot(cx, cy, col = c("red", "orange", "purple"), pch = 3, cex = 2, lwd = 2)
points(cx, cy, col = c("red", "orange", "purple"), pch = 3, cex = 2, lwd = 2)
mdist
mdist(x, y, cx, cy)
apply(disTmp, which.min)
apply(disTmp, which.min())
apply(disTmp, meaning, which.min())
apply(disTmp, meaning, which.min(distTmp))
apply(disTmp, meaning, which.min
)
apply(distTmp, meaning, which.min)
apply(distTmp, which.min)
apply(distTmp, distTmp[], which.min)
apply(distTmp, distTmp[,], which.min)
apply(distTmp, which.min)
apply(distTmp,2, which.min)
View(distTmp)
points(x, y, pch = 3, cex = 2, col = cols[newClust])
points(x, y, pch = 3, cex = 2, col = cols1[newClust])
points(x, y, pch = 19, cex = 2, col = cols1[newClust])
tapply(x, newClust, mean)
tapply(y, newClust, mean)
points(newCx, newCy, col = cols1, pch = 8, cex = 2, lwd = 2)
mdist(newCx, newCy)
mdist(x,y, newCx, newCy)
aplly(distTmp2, 2, wich.min)
apply(distTmp2, 2, wich.min)
apply(distTmp2, 2, which.min)
points(x, y, pch = 19, cex = 2, col = cols1[newClust2])
tapply(x, newClust2, mean)
tapply(y, newClust2, mean)
points(finalCx, finalCy, col = cols1, pch = 19, cex = 2, lwd = 2)
points(finalCx,finalCy,col=cols1,pch=9,cex=2,lwd=2)
kmeans(dataFrame, center = 3)
kmObj$iter
plot(x, y, col = kmObj$cluster, pch = 19, cex = 2)
points(kmObj$centers, col=c("black","red","green"), pch = 3, lwd = 3)
points(kmObj$centers,col=c("black","red","green"),pch=3,cex=3,lwd=3)
plot(x, y, col = kmeans(dataFrame,6)$cluster, pch = 19, cex = 2)
plot(x, y, col = kmeans(dataFrame,6)$cluster, pch = 19, cex = 2)
plot(x, y, col = kmeans(dataFrame,6)$cluster, pch = 19, cex = 2)
head(dataMatrix)
heatmap(dataMatrix)
myedit("addPatt.R")
source("addPatt.R", local = TRUE)
heatmap(dataMatrix)
mat
svd(mat)
matu*t(matv)
matu*diag*t(matv)
matu*diag
matu %*% diag %*% t(matv)
svd(scale(mat))
prcomp(scale(mat))
svd1$v[,1]
svd1$d
head(constantMatrix)
svd2$d
svd2[,c(1,2)]
svd2
svd2[,1:2]
svd2$v[,1:2]
scd2$d
scv2$d
svd2$d
dim(faceData)
(svd1$u[,1] %*% svd1$d[1]) %*% svd1$v[1,]
(svd1$u[,1] %*% svd1$d[1]) %*% svd1$v[1,]
(svd1$u[,1] %*% svd1$d[1])
a1 <- (svd1$u[,1] %*% svd1$d[1])
a1 <- svd1$u[,1] %*% svd1$d[1]
a1 <- (svd1$u[,1] * svd1$d) %*% svd1$v[1,]
a1 <- (svd1$u[,1] * svd1$d[1]) %*% t(svd1$v[,1])
image(a1)
myImage(a1)
a2 <- svd1$u[,1:2] %*% svd1$d[1:2] %*% t(svd1$v[,1:2])
a2 <- svd1$u[,1:2] %*% diag(svd1$d[1:2]) %*% t(svd1$v[,1:2])
myImage
myImage(a2)
a2 <- svd1$u[,1:5] %*% diag(svd1$d[1:5]) %*% t(svd1$v[,1:5])
myImage(svd1$u[,1:5] %*% diag(svd1$d[1:5]) %*% t(svd1$v[,1:5]))
myImage(svd1$u[,1:10] %*% diag(svd1$d[1:10]) %*% t(svd1$v[,1:10]))
quit
quit()
library(swirl)
swirl()
quit()
library(swirl)
swirl()
dim(ssd)
names(ssd[,562:563])
table(ssd$subject)
sum(table(ssd$subject))
table(ssd$activity)
sub1 <- subset(ssd, subject = 1)
sub1 <- subset(ssd, subject == 1)
dim(sub1)
names(sub1[,1:12])
myedit("showXY.R")
showMe(c(1:6))
midst <- dist(sub1[,1:3])
mdst <- dist(sub1[,1:3])
mdist <- dist(sub1[,1:3])
hclustering <- hclust(mdist)
myplclust(hclustering, lab.col =unclass(sub1$activity) )
mdist <- dist(sub1[,10:12])
hclustering <- hclust(mdist)
myplclust(hclustering, lab.col =unclass(sub1$activity) )
svd1 <- svd(scale(sub1[,-c(562,563)]))
dim(svd1$u)
maxCon <- wich.max(svd1$v)
maxCon <- which.max(svd1$v)
maxCon <- which.max(svd1$v[,2])
mdist <- dist(sub1[,10:12])
mdist <- dist(sub1[,c(10:12, maxCon])
mdist <- dist(sub1[,c(10:12,maxCon)])
hclustering <- hclust(mdist)
myplclust(hclustering, lab.col = unclass(sub1$activity))
names(sub1[maxCon])
kClust <- kmeans(sub1[;-2], centers = 6)
kClust <- kmeans(sub1[,-2], centers = 6)
kClust <- kmeans(sub1, centers = 6)
kClust <- kmeans(sub1[,-2], centers = 6)
kClust <- kmeans(sub1, centers = 6)
kClust <- kmeans(sub1, centers = 6)
kClust <- kmeans(sub1, centers = 6)
kClust <- kmeans(sub1[,-c(562,563)], centers = 6)
table(kClust$cluster, sub1$activity)
kClust <- kmeans(sub1[,-c(562,563)], centers = 6, nstart = 100)
table(kClust$cluster, sub1$activity)
dim(kClust$x)
dim(kClust$centers)
laying <- kClust$size==29
laying <- which(kClust$size==29)
plot(kClust$centers[laying,1:12], pch = 19, ylab = "Laying Cluster")
names(sub1[,1:3])
walkdown <- which(kClust$size==49)
plot(Clust$centers[walkdown,1:12], pch = 19, ylab = "Walkdown Cluster")
plot(kClust$centers[walkdown,1:12], pch = 19, ylab = "Walkdown Cluster")
library(datasets); library(fpc)
data(iris)
summary(iris)
# Notemos que esta función requiere que la clase objetivo no esté presente en
# el dataset de entrada, por lo cual removemos la columna 5 (la especie de flor)
# del set iris
iris2 <- iris[-5]
ds <- dbscan(iris2, eps=0.42, MinPts=5)
table(ds$cluster, iris$Species)
# En la tabla, los valores "1" a "3" en la primer columna representan los tres
# clusters identificados (automáticamente!), mientras que "0" designa los
# valores identificados como ruido o outliers, es decir, objetos no asignados a
# ningún cluster. Esto es sumamente útil en la práctica, porque nos ayuda a
# identificar valores extremos muy rápidamente, y su precisión es bastante
# robusta. Estos valores no asignados son mostrados como círculos negros en el
# gráfico que puede obtenerse con plot() aplicado al resultado del clustering(lo
# guardamos en 'ds'):
plot(ds, iris2)
plot(ds, iris2[c(1,4)])
plotcluster(iris2, ds$cluster)
plot(ds, iris2[c(1,4)])
set.seed(877)
set.seed(877)
idx <- sample(1:nrow(iris), 10)
newData <- iris[idx,-5]
newData <- newData + matrix(runif(10*4, min=0, max=0.2), nrow=10, ncol=4)
newData <- newData + matrix(runif(10*4, min=0, max=0.2), nrow=10, ncol=4)
# etiquetamos los datos nuevos
myPred <- predict(ds, iris2, newData)
# plot result
plot(iris2[c(1,4)], col=1+ds$cluster)
points(newData[c(1,4)], pch="*", col=1+myPred, cex=3)
table(myPred, iris$Species[idx])
require(datasets); require(party)
set.seed(1234)
ind <- sample(2, nrow(iris), replace = TRUE, prob = c(0.7, 0.3))
require(datasets); require(party)
require(datasets); require(party)
set.seed(1234)
ind <- sample(2, nrow(iris), replace = TRUE, prob = c(0.7, 0.3))
trainData <- iris[ind == 1, ]
testData <- iris[ind == 2,]
myFormula <- Species ~ Sepal.Length + Sepal.Width + Petal.Length + Petal.Width
```
Llamamos al modulo ctree
```{r}
iris_ctree <- ctree(myFormula, data=trainData)
```
Una vez que tenemos el modelo, podemos utilizar el comando predict() para
obtener las predicciones dadas por el modelo, y podemos comparar las
predicciones con el valor real usando el comando table()
```{r}
table(predict(iris_ctree), trainData$Species)
```
Podemos ver en más detalle cuáles son las predicciones hechas por el modelo:
```{r}
predict(iris_ctree)
```
Veamos entonces las reglas para el árbol construido y grafiquemos el mismo:
```{r}
print(iris_ctree)
plot(iris_ctree)
plot(iris_ctree)
installed.packages("sweave")
install.packages("sweave")
setRepositories()
sampleData <- read.csv("activity.csv", header = TRUE)
str(sampleData)
head(sampleData)
setwd("~/Documents/Data_Science/Cursos/6.Reproducible_Research/RepData_PeerAssessment1")
sampleData <- read.csv("activity.csv", header = TRUE)
str(sampleData)
head(sampleData)
require(dplyr); require(ggplot2)
require(dplyr); require(ggplot2)
df1 <- sampleData %>%
na.omit() %>%
group_by(date) %>%
summarize(sum(steps)) %>%
mutate(date = as.Date(date, format = "%Y-%m-%d"))
names(df1) <- c("Date", "Total_Steps")
```
Plot data frame
```{r}
ggplot(data.frame(df1), aes(x=Total_Steps)) +
labs(title = "Total steps per day", y ="Frecuency")+
geom_histogram(fill="lightblue") +
stat_bin(bins=7)
mean(df1$Total_Steps)
median(df1$Total_Steps)
```
```{r}
df2 <- sampleData %>%
na.omit() %>%
group_by(interval) %>%
summarize(mean(steps))
names(df2) <- c("Interval", "Mean_Steps")
```
Plot Total steps per each 5 min
```{r}
ggplot(df2, aes(x=Interval, y=Mean_Steps)) +
labs(title = "Total steps per each 5 min", y ="Frecuency", x ="Cumulative minutes")+
geom_line()
```
Print the interval with max value
```{r}
df2 %>%
filter(Mean_Steps == max(Mean_Steps))
```
## Imputing missing values
Calculate and report the total number of missing values in the dataset (i.e. the total number of rows with NAs)
```{r}
nrow(filter(sampleData, is.na(steps)))
```
Devise a strategy for filling in all of the missing values in the dataset. The strategy does not need to be sophisticated. For example, you could use the mean/median for that day, or the mean for that 5-minute interval, etc.
```{r}
[!is.na(data$steps)] = 1
df4 <- sampleData %>%
which(if(is.na(steps)) {mutate(steps ==df2$Mean_Steps)})
df4 <- sampleData %>%
if(is.na(steps)) {mutate(steps ==df2$Mean_Steps)}
View(sampleData)
sampleData2 <- is.na(sampleData$steps)
View(df2)
sampleData2 <- sampleData
sampleData2 <- sampleData
sampleData2[!is.na(steps)] <- 1
sampleData2[!is.na(steps)] = 1
sampleData2[,!is.na(steps)] = 1
sampleData2[!is.na(steps),] = 1
fill.value <- function(steps, interval) {
filled <- NA
if (!is.na(steps))
filled <- c(steps)
else
filled <- (averages[averages$interval==interval, "steps"])
return(filled)
}
filled.data <- data
filled.data$steps <- mapply(fill.value, filled.data$steps, filled.data$interval)
